!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	xor.py	/^A=0.02$/;"	v
B	xor.py	/^B = b*br.ms$/;"	v
B	xor.py	/^B=0.2$/;"	v
C	xor.py	/^C=-65$/;"	v
CheckNumSpikes	snn.py	/^def CheckNumSpikes(T, N_h, N_o, v0, u0, bench, number, input_neurons, liquid_neurons, hidden_neurons, output_neurons, Sin, Sliq, Sa, Sb, M, Mv, Mu, S_in, S_hidden, S_out, train=False, letter=None):$/;"	f
CollectSpikes	snn.py	/^def CollectSpikes(N_hidden, S_hidden, S_out):$/;"	f
D	xor.py	/^D=6$/;"	v
DesiredOut	train.py	/^def DesiredOut(label, bench):$/;"	f
GetInSpikes	snn.py	/^def GetInSpikes(img, bench='LI'):$/;"	f
IsNumber	snn.py	/^def IsNumber(character):$/;"	f
L	train.py	/^def L(t):$/;"	f
LowPass	snn.py	/^def LowPass(S):$/;"	f
M	xor.py	/^M =br.StateMonitor(output_neurons,'ge',record=0)$/;"	v
ModifyWeights	snn.py	/^def ModifyWeights(S, dv):$/;"	f
Mu	xor.py	/^Mu=br.StateMonitor(output_neurons,'u',record=0)$/;"	v
Mv	xor.py	/^Mv=br.StateMonitor(output_neurons,'v',record=0)$/;"	v
N	xor.py	/^    N = 0  # Number of filters$/;"	v
N	xor.py	/^    N = 1$/;"	v
N	xor.py	/^N = 1$/;"	v
N	xor.py	/^N =br.StateMonitor(liquid_neurons[0],'ge',record=0)$/;"	v
N_h	xor.py	/^N_h = 1$/;"	v
N_hidden	xor.py	/^N_hidden = [4]$/;"	v
N_in	xor.py	/^N_in = 2$/;"	v
N_liquid	xor.py	/^N_liquid = [14, 3, 3]$/;"	v
N_o	xor.py	/^N_o = 1$/;"	v
N_out	xor.py	/^N_out = 1$/;"	v
Nu	xor.py	/^Nu=br.StateMonitor(liquid_neurons[0],'u',record=0)$/;"	v
Nv	xor.py	/^Nv=br.StateMonitor(liquid_neurons[0],'v',record=0)$/;"	v
P_Index	snn.py	/^def P_Index(S_d, S_l):$/;"	f
P_Index	train.py	/^def P_Index(S_l, S_d):$/;"	f
Pc	xor.py	/^Pc = 0.05$/;"	v
PickWeightIndexA	train.py	/^def PickWeightIndexA(Sa, S_hidden, S_out):$/;"	f
PickWeightIndicesB	train.py	/^def PickWeightIndicesB(Mv, Sb, S_hidden, S_out, d_i=3):$/;"	f
Plot	snn.py	/^def Plot(M, Mu, Mv, number):$/;"	f
ReSuMe	train.py	/^def ReSuMe(desired_times, Pc, T, N, v0, u0, bench, number, input_neurons, liquid_neurons, hidden_neurons, output_neurons, Sin, Sliq, Sa, Sb, M, Mv, Mu, S_in, S_hidden, S_out):$/;"	f
ReadImg	snn.py	/^def ReadImg(number=1, letter=None, bench='LI', levels=None):$/;"	f
ReadNumber	snn.py	/^def ReadNumber(line, j):$/;"	f
ReadTimes	train.py	/^def ReadTimes(filename):$/;"	f
ReadWeights	snn.py	/^def ReadWeights(Sa, Sb, filename):$/;"	f
Run	snn.py	/^def Run(T, v0, u0, bench, number, input_neurons, liquid_neurons, hidden_neurons, output_neurons, Sin, Sliq, Sa, Sb, M, Mv, Mu, S_in, S_hidden, S_out, train=False, letter=None):$/;"	f
S_hidden	xor.py	/^S_hidden = []$/;"	v
S_in	xor.py	/^S_in = br.SpikeMonitor(input_neurons, record=True)$/;"	v
S_out	xor.py	/^S_out = br.SpikeMonitor(output_neurons, record=True)$/;"	v
Sa	xor.py	/^Sa = []$/;"	v
SaveWeights	snn.py	/^def SaveWeights(Sa, Sb, filename):$/;"	f
Sb	xor.py	/^Sb = br.Synapses(hidden_neurons[-1], output_neurons, model='w:1', pre='ge+=w')$/;"	v
SetNumSpikes	snn.py	/^def SetNumSpikes(T, N_h, N_o, v0, u0, bench, number, input_neurons, liquid_neurons, hidden_neurons, output_neurons, Sin, Sliq, Sa, Sb, M, Mv, Mu, S_in, S_hidden, S_out, train=False, letter=None):$/;"	f
Sin	xor.py	/^Sin = br.Synapses(input_neurons, liquid_inputs, model='w:1', pre='ge+=w')$/;"	v
Sliq	xor.py	/^Sliq = br.Synapses(liquid_neurons, liquid_neurons, model='w:1', pre='ge+=w')$/;"	v
SpikeSlopes	train.py	/^def SpikeSlopes(Mv, S_out, d_i=3):$/;"	f
T	xor.py	/^T = 60$/;"	v
TestNodeRange	train.py	/^def TestNodeRange(T, N, v0, u0, bench, number, input_neurons, liquid_neurons, hidden_neurons, output_neurons, Sin, Sliq, Sa, Sb, M, Mv, Mu, S_in, S_hidden, S_out):$/;"	f
WeightChange	train.py	/^def WeightChange(s):$/;"	f
a	xor.py	/^a = A\/br.ms$/;"	v
b	xor.py	/^b = B\/br.ms$/;"	v
bench	xor.py	/^bench = bench$/;"	v
bench	xor.py	/^bench='xor'$/;"	v
c	xor.py	/^c = C * br.mvolt$/;"	v
count	xor.py	/^count = 0$/;"	v
d	xor.py	/^d = D*br.mV\/br.ms$/;"	v
d_w	snn.py	/^def d_w(S_d, S_l, S_in):$/;"	f
data_dir	xor.py	/^    data_dir = 'noise\/'$/;"	v
data_dir	xor.py	/^    data_dir = 'on_pyr\/'$/;"	v
desired	xor.py	/^        desired = desired_times[0]$/;"	v
desired	xor.py	/^        desired = desired_times[1]$/;"	v
desired_times	xor.py	/^        desired_times = [-1, -1]$/;"	v
desired_times	xor.py	/^        desired_times = train.ReadTimes("times.txt")$/;"	v
diff	xor.py	/^        diff = extreme_spikes[1] + extreme_spikes[0]$/;"	v
diff_r	xor.py	/^        diff_r = diff \/ 10$/;"	v
dir	xor.py	/^    dir = 'li-data\/'$/;"	v
dir	xor.py	/^    dir = 'minst\/'$/;"	v
extreme_spikes	xor.py	/^        extreme_spikes = train.TestNodeRange(T, N, v0, u0, bench, number, input_neurons, liquid_neurons, hidden_neurons, output_neurons, Sin, Sliq, Sa, Sb, M, Mv, Mu, S_in, S_hidden, S_out)$/;"	v
f	xor.py	/^        f = open("times.txt", 'w')$/;"	v
g	xor.py	/^g = 2$/;"	v
hidden_neurons	xor.py	/^hidden_neurons = []# * len(N_hidden)$/;"	v
img	xor.py	/^img = np.empty(img_dims)$/;"	v
img_dims	xor.py	/^    img_dims = (1, 2)$/;"	v
img_dims	xor.py	/^    img_dims = (n, n)$/;"	v
input_neurons	xor.py	/^input_neurons = br.SpikeGeneratorGroup(N_in+1, spikes)$/;"	v
levels	xor.py	/^    levels = 1$/;"	v
levels	xor.py	/^    levels = levels$/;"	v
levels	xor.py	/^levels=4$/;"	v
liquid_hidden	xor.py	/^liquid_hidden = liquid_neurons.subgroup(N_liquid[0] - N_liquid[1] - N_liquid[2])$/;"	v
liquid_inputs	xor.py	/^liquid_inputs = liquid_neurons.subgroup(N_liquid[1])$/;"	v
liquid_neurons	xor.py	/^liquid_neurons = br.NeuronGroup(N_liquid[0], model=eqs_hidden_neurons, refractory=2*br.ms, reset=reset)$/;"	v
liquid_output	xor.py	/^liquid_output = liquid_neurons.subgroup(N_liquid[2])$/;"	v
liquid_p	xor.py	/^liquid_p = 0.7$/;"	v
make2dList	snn.py	/^def make2dList(rows, cols):$/;"	f
n	xor.py	/^    n = 3   # Dimension of single image (no pyramid)$/;"	v
n	xor.py	/^    n = 32  # Dimension of largest image in pyramid$/;"	v
net	xor.py	/^net = br.Network(objects)$/;"	v
number	xor.py	/^number = 1 #number of hidden_neurons$/;"	v
number	xor.py	/^number = 3$/;"	v
objects	xor.py	/^objects = []$/;"	v
output_neurons	xor.py	/^output_neurons = br.NeuronGroup(N_out, model=eqs_hidden_neurons, threshold=vt, refractory=2*br.ms, reset=reset)$/;"	v
simtime	xor.py	/^simtime = 1 #duration of the simulation in s$/;"	v
spikes	xor.py	/^spikes = []$/;"	v
tau	xor.py	/^tau = tau*br.ms$/;"	v
tau	xor.py	/^tau=5$/;"	v
u0	xor.py	/^u0 = (25*(-5*A*B + A**2 * B**2)) * br.mV$/;"	v
v0	xor.py	/^v0 = (25*(-5 + A**2 * B**2)) * br.mV$/;"	v
vr	xor.py	/^vr = -74 * br.mV$/;"	v
vt	xor.py	/^vt = -15 * br.mV$/;"	v
weight_file	xor.py	/^weight_file = "weights.txt"$/;"	v
